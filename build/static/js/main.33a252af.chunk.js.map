{"version":3,"sources":["reportWebVitals.js","components/InputArea.jsx","components/TodoArea.jsx","App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputArea","props","inputTodo","onChange","onKeyPress","placeholder","type","value","TodoArea","todos","onClickDelete","map","todo","className","todoShowFlag","title","onClick","id","icon","faTrashAlt","alt","App","useState","currentId","setCurrentId","setInputTodo","setTodos","searchKeyword","setSearchKeyword","regexp","RegExp","match","changeShowFlag","event","target","key","newTask","newTodos","taskId","deletedTodos","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8BCLDQ,EAAY,SAACC,GACxB,IAAQC,EAAiDD,EAAjDC,UAAWC,EAAsCF,EAAtCE,SAAUC,EAA4BH,EAA5BG,WAAYC,EAAgBJ,EAAhBI,YAEzC,OACI,uBACEC,KAAK,OACLD,YAAaA,EACbE,MAAOL,EACPC,SAAUA,EACVC,WAAYA,K,gBCPPI,EAAW,SAACP,GACvB,IAAQQ,EAAwBR,EAAxBQ,MAAOC,EAAiBT,EAAjBS,cAEf,OACE,mCACE,6BACGD,EAAME,KAAI,SAACC,GACV,OACE,qBAAmBC,UAAU,YAA7B,SACGD,EAAKE,cAAgB,qBAAID,UAAU,WAAd,UACnBD,EAAKG,MAEN,cAAC,IAAD,CACEC,QAAS,kBAAMN,EAAcE,EAAKK,KAClCC,KAAMC,IACNC,IAAI,eACJP,UAAU,aARND,EAAKK,YCLdI,G,MAAM,WAEjB,IAgBA,EAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAkCF,mBAAS,IAA3C,mBAAOpB,EAAP,KAAkBuB,EAAlB,KAMA,EAAwBH,mBAxBH,CACnB,CACEL,GAAI,EACJF,MAAO,QACPD,cAAc,GAEhB,CACEG,GAAI,EACJF,MAAO,QACPD,cAAc,KAelB,mBAAKL,EAAL,KAAYiB,EAAZ,KAGA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,MA0CuB,WAErB,IAF2B,EAErBC,EAAS,IAAIC,OAAO,IAAMH,EAAe,KAFpB,cAKRlB,GALQ,IAK3B,2BAA0B,CAAC,IAAhBG,EAAe,QACnBA,EAAKG,MAAMgB,MAAMF,GAGpBjB,EAAKE,cAAe,EAFpBF,EAAKE,cAAe,GAPG,+BAe7BkB,GASA,OACE,qCACE,oBAAInB,UAAU,QAAd,uBACA,oBAAIA,UAAU,YAAd,sBACA,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEX,UAAWA,EACXC,SAtEkB,SAAC8B,GAAD,OAAWR,EAAaQ,EAAMC,OAAO3B,QAuEvDH,WArEW,SAAC6B,GAClB,GAAkB,UAAdA,EAAME,IAAiB,CAEzB,GAAkB,KAAdjC,IAAqBA,EAAU6B,MAAM,OAAQ,OAEjD,IAAMK,EAAU,CACdnB,GAAIM,EAAY,EAChBR,MAAOb,EACPY,cAAc,GAIVuB,EAAQ,sBAAO5B,GAAP,CAAc2B,IAC5BV,EAASW,GAGTZ,EAAa,IAEbD,EAAaD,EAAY,KAoDrBlB,YAAa,aAEf,cAAC,EAAD,CAAWF,SAxCU,SAAC8B,GAC1BL,EAAiBK,EAAMC,OAAO3B,QAuCeF,YAAa,gBACtD,cAAC,EAAD,CAAUI,MAAOA,EAAOC,cAlBR,SAAC4B,GAErB,IAAMC,EAAe9B,EAAM+B,QAAO,SAAC/B,GAAD,OAAWA,EAAMQ,KAAOqB,KAC1DZ,EAASa,cC5FbE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BtD,M","file":"static/js/main.33a252af.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nexport const InputArea = (props) => {\n  const { inputTodo, onChange, onKeyPress, placeholder } = props;\n\n  return (\n      <input\n        type=\"text\"\n        placeholder={placeholder}\n        value={inputTodo}\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n      />\n  );\n};\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\n\nexport const TodoArea = (props) => {\n  const { todos, onClickDelete} = props;\n\n  return (\n    <>\n      <ul>\n        {todos.map((todo) => {\n          return (\n            <div key={todo.id} className=\"todo-list\">\n              {todo.todoShowFlag && <li className=\"list-low\">\n                {todo.title}\n                {/* 引数を渡した関数をonClickに指定すると画面がレンダリングされた際にonClickイベントが発火してしまうためアロー関数にして指定する */}\n                <FontAwesomeIcon\n                  onClick={() => onClickDelete(todo.id)}\n                  icon={faTrashAlt}\n                  alt=\"削除\"\n                  className=\"icon\"\n                />\n              </li> }\n            </div>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport { InputArea } from \"./components/InputArea\";\nimport { TodoArea } from \"./components/TodoArea\";\n\nimport \"./CSS/style.scss\";\n\nexport const App = () => {\n  // Todo検索時に各Todoに表示非表示の判定をするフラグが必要となったため、Todoのデータ型を連想配列にした\n  const initialTasks = [\n    {\n      id: 1,\n      title: \"Todo1\",\n      todoShowFlag: true,\n    },\n    {\n      id: 2,\n      title: \"Todo2\",\n      todoShowFlag: true,\n    },\n  ];\n\n  // task追加時にIdを連番にするために定義\n  // 初期のtaskが2つあるため2から始める\n  // CATION   !!!!：テストのためのデータを消す場合は初期値を0にする!!!!!!!\n  const [currentId, setCurrentId] = useState(2);\n  // 新しいtodoの入力値を保持するstate\n  const [inputTodo, setInputTodo] = useState(\"\");\n\n  // 表示するtodoListを保持するstate\n  // 検索機能を実装する前の名残\n  // const [todos, setTodos] = useState([\"Todo1\", \"Todo2\"]);\n  // TodoListの初期値を読み込み\n  let [todos, setTodos] = useState(initialTasks);\n\n  // 検索キーワードを保持するstate\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n\n  // todo追加機能\n  const onChangeInputTodo = (event) => setInputTodo(event.target.value);\n\n  const pressEnter = (event) => {\n    if (event.key === \"Enter\") {\n      // 空文字もしくはスペースのみのときは処理を抜ける\n      if (inputTodo === \"\" || !inputTodo.match(/\\S/g)) return;\n      // 新しく追加するためのtaskを定義する\n      const newTask = {\n        id: currentId + 1,\n        title: inputTodo,\n        todoShowFlag: true,\n      };\n\n\n      const newTodos = [...todos, newTask];\n      setTodos(newTodos);\n\n      // inputFormを空にする\n      setInputTodo(\"\");\n      // 次のtaskのidが重複しないように +1しておく\n      setCurrentId(currentId + 1);\n    }\n  };\n\n  // 検索機能(仮) => 検索ワードから外れたTodoは削除されてしまう\n  // filterを使用してtodoの配列から外れた要素を削除しているのが問題。\n  // const onChangeSearchTodo = (event) => {\n  //   const searchKeyword = event.target.value;\n  //   const regexp = new RegExp(\"^\" + searchKeyword, \"i\");\n  //   const searchedTodos = todos.filter((event) => event.match(regexp));\n  //   setTodos(searchedTodos);\n  // };\n\n  // todoの検索ワードを受け取る関数\n  const onChangeSearchTodo = (event) => {\n    setSearchKeyword(event.target.value);\n  };\n\n  // 検索ワードに一致したTodoのshowFlagを変更する関数\n  const changeShowFlag = () => {\n    //　先頭一致の正規表現を作成\n    const regexp = new RegExp(\"^\" + searchKeyword, \"i\");\n\n    // Todoと検索ワードが先頭から部分一しない場合はshowFlagをfalseにする\n    for (const todo of todos) {\n      if (!todo.title.match(regexp)) {\n        todo.todoShowFlag = false;\n      } else {\n        todo.todoShowFlag = true;\n      }\n    }\n  };\n\n  // showFlagを変更する関数を実行\n  changeShowFlag();\n\n  // 削除機能\n  const onClickDelete = (taskId) => {\n    // 削除ボタンが押されたtaskのIdに一致しないtaskで新たにtodoListを作成する\n    const deletedTodos = todos.filter((todos) => todos.id !== taskId);\n    setTodos(deletedTodos);\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">Todo List</h1>\n      <h2 className=\"sub-title\">ADD TODO</h2>\n      <div className=\"wrapper\">\n        <InputArea\n          inputTodo={inputTodo}\n          onChange={onChangeInputTodo}\n          onKeyPress={pressEnter}\n          placeholder={\"New Todo\"}\n        />\n        <InputArea onChange={onChangeSearchTodo} placeholder={\"Search Todo\"} />\n        <TodoArea todos={todos} onClickDelete={onClickDelete} />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport { App } from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}